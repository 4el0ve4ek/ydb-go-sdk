// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ydb-platform/ydb-go-sdk/v3/internal/query (interfaces: ResultStream)
//
// Generated by this command:
//
//	mockgen -destination result_stream_mock_test.go -package query -write_package_comment=false . ResultStream
package query

import (
	reflect "reflect"

	Ydb_Query "github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Query"
	gomock "go.uber.org/mock/gomock"
)

// MockResultStream is a mock of ResultStream interface.
type MockResultStream struct {
	ctrl     *gomock.Controller
	recorder *MockResultStreamMockRecorder
}

// MockResultStreamMockRecorder is the mock recorder for MockResultStream.
type MockResultStreamMockRecorder struct {
	mock *MockResultStream
}

// NewMockResultStream creates a new mock instance.
func NewMockResultStream(ctrl *gomock.Controller) *MockResultStream {
	mock := &MockResultStream{ctrl: ctrl}
	mock.recorder = &MockResultStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResultStream) EXPECT() *MockResultStreamMockRecorder {
	return m.recorder
}

// Recv mocks base method.
func (m *MockResultStream) Recv() (*Ydb_Query.ExecuteQueryResponsePart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Ydb_Query.ExecuteQueryResponsePart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockResultStreamMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockResultStream)(nil).Recv))
}
